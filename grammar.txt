Created by rly version 0.2.3

Grammar

Rule 0     S' -> statement
Rule 1     statement -> expression
Rule 2     expression -> IDENTIFIER ASSIGN expression END_OF_STATEMENT
Rule 3     expression -> PRINT OPEN_PARENTHESIS expression CLOSE_PARENTHESIS END_OF_STATEMENT
Rule 4     expression -> STRING
Rule 5     expression -> INTEGER
Rule 6     expression -> FLOAT
Rule 7     expression -> BOOLEAN
Rule 8     expression -> IDENTIFIER

Terminals, with rules where they appear

AND                  : 
ASSIGN               : 2
BOOLEAN              : 7
CLOSE_BRACKET        : 
CLOSE_PARENTHESIS    : 3
COMMA                : 
DIVIDE               : 
DIVIDE_ASSIGN        : 
ELSE                 : 
ELSIF                : 
END_OF_STATEMENT     : 2 3
EQUAL                : 
EXPONENT             : 
EXPONENT_ASSIGN      : 
FLOAT                : 6
FOR                  : 
FUNCTION_DEFINITION  : 
GREATER_THAN         : 
GREATER_THAN_OR_EQUAL : 
IDENTIFIER           : 2 8
IF                   : 
INTEGER              : 5
LESS_THAN            : 
LESS_THAN_OR_EQUAL   : 
MINUS                : 
MINUS_ASSIGN         : 
MODULUS              : 
MODULUS_ASSIGN       : 
MULTIPLY             : 
MULTIPLY_ASSIGN      : 
NOT                  : 
NOT_EQUAL            : 
OPEN_BRACKET         : 
OPEN_PARENTHESIS     : 3
OR                   : 
PLUS                 : 
PLUS_ASSIGN          : 
PRINT                : 3
STRING               : 4
WHILE                : 
error                : 

Nonterminals, with rules where they appear

expression           : 1 2 3
statement            : 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . expression
    (2) expression -> . IDENTIFIER ASSIGN expression END_OF_STATEMENT
    (3) expression -> . PRINT OPEN_PARENTHESIS expression CLOSE_PARENTHESIS END_OF_STATEMENT
    (4) expression -> . STRING
    (5) expression -> . INTEGER
    (6) expression -> . FLOAT
    (7) expression -> . BOOLEAN
    (8) expression -> . IDENTIFIER

    IDENTIFIER      shift and go to state 3
    PRINT           shift and go to state 4
    STRING          shift and go to state 5
    INTEGER         shift and go to state 6
    FLOAT           shift and go to state 7
    BOOLEAN         shift and go to state 8

    statement                      shift and go to state 1
    expression                     shift and go to state 2

state 1

    (0) S' -> statement .



state 2

    (1) statement -> expression .

    $end            reduce using rule 1 (statement -> expression .)


state 3

    (2) expression -> IDENTIFIER . ASSIGN expression END_OF_STATEMENT
    (8) expression -> IDENTIFIER .

    ASSIGN          shift and go to state 9
    $end            reduce using rule 8 (expression -> IDENTIFIER .)
    END_OF_STATEMENT reduce using rule 8 (expression -> IDENTIFIER .)
    CLOSE_PARENTHESIS reduce using rule 8 (expression -> IDENTIFIER .)


state 4

    (3) expression -> PRINT . OPEN_PARENTHESIS expression CLOSE_PARENTHESIS END_OF_STATEMENT

    OPEN_PARENTHESIS shift and go to state 10


state 5

    (4) expression -> STRING .

    $end            reduce using rule 4 (expression -> STRING .)
    END_OF_STATEMENT reduce using rule 4 (expression -> STRING .)
    CLOSE_PARENTHESIS reduce using rule 4 (expression -> STRING .)


state 6

    (5) expression -> INTEGER .

    $end            reduce using rule 5 (expression -> INTEGER .)
    END_OF_STATEMENT reduce using rule 5 (expression -> INTEGER .)
    CLOSE_PARENTHESIS reduce using rule 5 (expression -> INTEGER .)


state 7

    (6) expression -> FLOAT .

    $end            reduce using rule 6 (expression -> FLOAT .)
    END_OF_STATEMENT reduce using rule 6 (expression -> FLOAT .)
    CLOSE_PARENTHESIS reduce using rule 6 (expression -> FLOAT .)


state 8

    (7) expression -> BOOLEAN .

    $end            reduce using rule 7 (expression -> BOOLEAN .)
    END_OF_STATEMENT reduce using rule 7 (expression -> BOOLEAN .)
    CLOSE_PARENTHESIS reduce using rule 7 (expression -> BOOLEAN .)


state 9

    (2) expression -> IDENTIFIER ASSIGN . expression END_OF_STATEMENT
    (2) expression -> . IDENTIFIER ASSIGN expression END_OF_STATEMENT
    (3) expression -> . PRINT OPEN_PARENTHESIS expression CLOSE_PARENTHESIS END_OF_STATEMENT
    (4) expression -> . STRING
    (5) expression -> . INTEGER
    (6) expression -> . FLOAT
    (7) expression -> . BOOLEAN
    (8) expression -> . IDENTIFIER

    IDENTIFIER      shift and go to state 3
    PRINT           shift and go to state 4
    STRING          shift and go to state 5
    INTEGER         shift and go to state 6
    FLOAT           shift and go to state 7
    BOOLEAN         shift and go to state 8

    expression                     shift and go to state 11

state 10

    (3) expression -> PRINT OPEN_PARENTHESIS . expression CLOSE_PARENTHESIS END_OF_STATEMENT
    (2) expression -> . IDENTIFIER ASSIGN expression END_OF_STATEMENT
    (3) expression -> . PRINT OPEN_PARENTHESIS expression CLOSE_PARENTHESIS END_OF_STATEMENT
    (4) expression -> . STRING
    (5) expression -> . INTEGER
    (6) expression -> . FLOAT
    (7) expression -> . BOOLEAN
    (8) expression -> . IDENTIFIER

    IDENTIFIER      shift and go to state 3
    PRINT           shift and go to state 4
    STRING          shift and go to state 5
    INTEGER         shift and go to state 6
    FLOAT           shift and go to state 7
    BOOLEAN         shift and go to state 8

    expression                     shift and go to state 12

state 11

    (2) expression -> IDENTIFIER ASSIGN expression . END_OF_STATEMENT

    END_OF_STATEMENT shift and go to state 13


state 12

    (3) expression -> PRINT OPEN_PARENTHESIS expression . CLOSE_PARENTHESIS END_OF_STATEMENT

    CLOSE_PARENTHESIS shift and go to state 14


state 13

    (2) expression -> IDENTIFIER ASSIGN expression END_OF_STATEMENT .

    $end            reduce using rule 2 (expression -> IDENTIFIER ASSIGN expression END_OF_STATEMENT .)
    END_OF_STATEMENT reduce using rule 2 (expression -> IDENTIFIER ASSIGN expression END_OF_STATEMENT .)
    CLOSE_PARENTHESIS reduce using rule 2 (expression -> IDENTIFIER ASSIGN expression END_OF_STATEMENT .)


state 14

    (3) expression -> PRINT OPEN_PARENTHESIS expression CLOSE_PARENTHESIS . END_OF_STATEMENT

    END_OF_STATEMENT shift and go to state 15


state 15

    (3) expression -> PRINT OPEN_PARENTHESIS expression CLOSE_PARENTHESIS END_OF_STATEMENT .

    $end            reduce using rule 3 (expression -> PRINT OPEN_PARENTHESIS expression CLOSE_PARENTHESIS END_OF_STATEMENT .)
    END_OF_STATEMENT reduce using rule 3 (expression -> PRINT OPEN_PARENTHESIS expression CLOSE_PARENTHESIS END_OF_STATEMENT .)
    CLOSE_PARENTHESIS reduce using rule 3 (expression -> PRINT OPEN_PARENTHESIS expression CLOSE_PARENTHESIS END_OF_STATEMENT .)


